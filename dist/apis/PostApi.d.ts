/**
 * Janun API
 * REST API for Janun Backend Service by Team QuantumGuys
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { Comment, CommentCreateRequest, CommentsPage, GeneralResponse, Post, PostCreateRequest, PostsPage } from '../models/index';
export interface CreateCommentRequest {
    slug: string;
    commentCreateRequest: CommentCreateRequest;
}
export interface CreatePostRequest {
    postCreateRequest: PostCreateRequest;
}
export interface DeleteCommentRequest {
    slug: string;
    commentId: number;
}
export interface DeletePostRequest {
    slug: string;
}
export interface GetCommentRequest {
    slug: string;
    commentId: number;
}
export interface GetCommentsRequest {
    slug: string;
    search?: string;
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}
export interface GetMyCommentsInPostRequest {
    slug: string;
    search?: string;
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}
export interface GetPostRequest {
    slug: string;
}
export interface GetPostsRequest {
    search?: string;
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}
export interface ReactToPostRequest {
    slug: string;
    type?: ReactToPostTypeEnum;
}
export interface UpdatePostRequest {
    slug: string;
    postCreateRequest: PostCreateRequest;
}
/**
 *
 */
export declare class PostApi extends runtime.BaseAPI {
    /**
     * create comment
     * create comment
     */
    createCommentRaw(requestParameters: CreateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Comment>>;
    /**
     * create comment
     * create comment
     */
    createComment(requestParameters: CreateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Comment>;
    /**
     * create post
     * create post
     */
    createPostRaw(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Post>>;
    /**
     * create post
     * create post
     */
    createPost(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Post>;
    /**
     * delete comment
     * delete comment
     */
    deleteCommentRaw(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneralResponse>>;
    /**
     * delete comment
     * delete comment
     */
    deleteComment(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneralResponse>;
    /**
     * delete post
     * delete post
     */
    deletePostRaw(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneralResponse>>;
    /**
     * delete post
     * delete post
     */
    deletePost(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneralResponse>;
    /**
     * get comment
     * get comment
     */
    getCommentRaw(requestParameters: GetCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Comment>>;
    /**
     * get comment
     * get comment
     */
    getComment(requestParameters: GetCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Comment>;
    /**
     * get comments
     * get comments
     */
    getCommentsRaw(requestParameters: GetCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentsPage>>;
    /**
     * get comments
     * get comments
     */
    getComments(requestParameters: GetCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentsPage>;
    /**
     * get my comments
     * get my comments
     */
    getMyCommentsInPostRaw(requestParameters: GetMyCommentsInPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentsPage>>;
    /**
     * get my comments
     * get my comments
     */
    getMyCommentsInPost(requestParameters: GetMyCommentsInPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentsPage>;
    /**
     * get post
     * get post
     */
    getPostRaw(requestParameters: GetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Post>>;
    /**
     * get post
     * get post
     */
    getPost(requestParameters: GetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Post>;
    /**
     * get posts
     * get posts
     */
    getPostsRaw(requestParameters: GetPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostsPage>>;
    /**
     * get posts
     * get posts
     */
    getPosts(requestParameters?: GetPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostsPage>;
    /**
     * react to post
     * react to post
     */
    reactToPostRaw(requestParameters: ReactToPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Post>>;
    /**
     * react to post
     * react to post
     */
    reactToPost(requestParameters: ReactToPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Post>;
    /**
     * update post
     * update post
     */
    updatePostRaw(requestParameters: UpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Post>>;
    /**
     * update post
     * update post
     */
    updatePost(requestParameters: UpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Post>;
}
/**
 * @export
 */
export declare const ReactToPostTypeEnum: {
    readonly Like: "like";
    readonly Dislike: "dislike";
};
export type ReactToPostTypeEnum = typeof ReactToPostTypeEnum[keyof typeof ReactToPostTypeEnum];
