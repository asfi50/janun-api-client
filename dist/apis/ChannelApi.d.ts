/**
 * Janun API
 * REST API for Janun Backend Service by Team QuantumGuys
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { Channel, ChannelCreateRequest, ChannelsPage, GeneralResponse, PostsPage } from '../models/index';
export interface CreateChannelRequest {
    channelCreateRequest: ChannelCreateRequest;
}
export interface DeleteChannelRequest {
    slug: string;
}
export interface GetChannelRequest {
    slug: string;
}
export interface GetChannelsRequest {
    search?: string;
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}
export interface GetPostsInChannelRequest {
    slug: string;
    search?: string;
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}
export interface SubscribeChannelRequest {
    slug: string;
}
export interface UnsubscribeChannelRequest {
    slug: string;
}
export interface UpdateChannelRequest {
    slug: string;
    channelCreateRequest: ChannelCreateRequest;
}
/**
 *
 */
export declare class ChannelApi extends runtime.BaseAPI {
    /**
     * Create a new channel
     * Create Channel
     */
    createChannelRaw(requestParameters: CreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channel>>;
    /**
     * Create a new channel
     * Create Channel
     */
    createChannel(requestParameters: CreateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channel>;
    /**
     * Delete a channel
     * Delete Channel
     */
    deleteChannelRaw(requestParameters: DeleteChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneralResponse>>;
    /**
     * Delete a channel
     * Delete Channel
     */
    deleteChannel(requestParameters: DeleteChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneralResponse>;
    /**
     * Get channel by slug
     * Get Channel
     */
    getChannelRaw(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channel>>;
    /**
     * Get channel by slug
     * Get Channel
     */
    getChannel(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channel>;
    /**
     * Get all channels
     * Get Channels
     */
    getChannelsRaw(requestParameters: GetChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelsPage>>;
    /**
     * Get all channels
     * Get Channels
     */
    getChannels(requestParameters?: GetChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelsPage>;
    /**
     * Get posts in a channel
     * Get Posts
     */
    getPostsInChannelRaw(requestParameters: GetPostsInChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostsPage>>;
    /**
     * Get posts in a channel
     * Get Posts
     */
    getPostsInChannel(requestParameters: GetPostsInChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostsPage>;
    /**
     * Subscribe to a channel. If user is subscribed to any thread in the channel then nothing will happen. Otherwise, user will be subscribed to all threads in the channel.
     * Subscribe to Channel
     */
    subscribeChannelRaw(requestParameters: SubscribeChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channel>>;
    /**
     * Subscribe to a channel. If user is subscribed to any thread in the channel then nothing will happen. Otherwise, user will be subscribed to all threads in the channel.
     * Subscribe to Channel
     */
    subscribeChannel(requestParameters: SubscribeChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channel>;
    /**
     * Unsubscribe from a channel. If user is not subscribed to any thread in the channel then nothing will happen. Otherwise, user will be unsubscribed from all threads in the channel.
     * Unsubscribe from Channel
     */
    unsubscribeChannelRaw(requestParameters: UnsubscribeChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channel>>;
    /**
     * Unsubscribe from a channel. If user is not subscribed to any thread in the channel then nothing will happen. Otherwise, user will be unsubscribed from all threads in the channel.
     * Unsubscribe from Channel
     */
    unsubscribeChannel(requestParameters: UnsubscribeChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channel>;
    /**
     * Update a channel
     * Update Channel
     */
    updateChannelRaw(requestParameters: UpdateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channel>>;
    /**
     * Update a channel
     * Update Channel
     */
    updateChannel(requestParameters: UpdateChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channel>;
}
