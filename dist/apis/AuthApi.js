"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Janun API
 * REST API for Janun Backend Service by Team QuantumGuys
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class AuthApi extends runtime.BaseAPI {
    /**
     * Change the user\'s password
     */
    changePasswordRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['changePasswordRequest'] == null) {
                throw new runtime.RequiredError('changePasswordRequest', 'Required parameter "changePasswordRequest" was null or undefined when calling changePassword().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/auth/change-password`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChangePasswordRequestToJSON)(requestParameters['changePasswordRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UserFromJSON)(jsonValue));
        });
    }
    /**
     * Change the user\'s password
     */
    changePassword(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changePasswordRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Check if the username is available
     */
    checkUsernameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['username'] == null) {
                throw new runtime.RequiredError('username', 'Required parameter "username" was null or undefined when calling checkUsername().');
            }
            const queryParameters = {};
            if (requestParameters['username'] != null) {
                queryParameters['username'] = requestParameters['username'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/auth/check-username`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UsernameAvailableResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Check if the username is available
     */
    checkUsername(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.checkUsernameRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Confirm the user\'s email using the token sent to the user\'s email
     */
    confirmEmailRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['token'] == null) {
                throw new runtime.RequiredError('token', 'Required parameter "token" was null or undefined when calling confirmEmail().');
            }
            const queryParameters = {};
            if (requestParameters['token'] != null) {
                queryParameters['token'] = requestParameters['token'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/auth/confirm`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GeneralResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Confirm the user\'s email using the token sent to the user\'s email
     */
    confirmEmail(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.confirmEmailRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Send a password reset link to the user\'s email. Username or email can be used to send the link.
     */
    forgotPasswordRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['forgotPasswordRequest'] == null) {
                throw new runtime.RequiredError('forgotPasswordRequest', 'Required parameter "forgotPasswordRequest" was null or undefined when calling forgotPassword().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/auth/forgot-password`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ForgotPasswordRequestToJSON)(requestParameters['forgotPasswordRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GeneralResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Send a password reset link to the user\'s email. Username or email can be used to send the link.
     */
    forgotPassword(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.forgotPasswordRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get user details if authenticated or throw an exception if not authenticated
     */
    getUserRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/auth/user`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UserFromJSON)(jsonValue));
        });
    }
    /**
     * Get user details if authenticated or throw an exception if not authenticated
     */
    getUser(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUserRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Login with (username or email) and password
     */
    loginRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['loginRequest'] == null) {
                throw new runtime.RequiredError('loginRequest', 'Required parameter "loginRequest" was null or undefined when calling login().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/auth/login`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LoginRequestToJSON)(requestParameters['loginRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.LoginResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Login with (username or email) and password
     */
    login(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.loginRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Logout the user by deleting the token cookie
     */
    logoutRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/auth/logout`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GeneralResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Logout the user by deleting the token cookie
     */
    logout(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.logoutRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    registerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['registerRequest'] == null) {
                throw new runtime.RequiredError('registerRequest', 'Required parameter "registerRequest" was null or undefined when calling register().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/auth/register`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RegisterRequestToJSON)(requestParameters['registerRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UserFromJSON)(jsonValue));
        });
    }
    /**
     */
    register(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.registerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Resend the confirmation email to the user\'s email
     */
    resendConfirmationEmailRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/auth/resend-email`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GeneralResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Resend the confirmation email to the user\'s email
     */
    resendConfirmationEmail(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.resendConfirmationEmailRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Reset the user\'s password using the token sent to the user\'s email
     */
    resetPasswordRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['resetPasswordRequest'] == null) {
                throw new runtime.RequiredError('resetPasswordRequest', 'Required parameter "resetPasswordRequest" was null or undefined when calling resetPassword().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/auth/reset-password`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ResetPasswordRequestToJSON)(requestParameters['resetPasswordRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UserFromJSON)(jsonValue));
        });
    }
    /**
     * Reset the user\'s password using the token sent to the user\'s email
     */
    resetPassword(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.resetPasswordRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.AuthApi = AuthApi;
