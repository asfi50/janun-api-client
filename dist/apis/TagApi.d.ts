/**
 * Janun API
 * REST API for Janun Backend Service by Team QuantumGuys
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { GeneralResponse, PostsPage, Tag, TagCreateRequest, TagsPage } from '../models/index';
export interface CreateTagRequest {
    tagCreateRequest: TagCreateRequest;
}
export interface DeleteTagRequest {
    slug: string;
}
export interface GetPostsInTagRequest {
    slug: string;
    search?: string;
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}
export interface GetTagRequest {
    slug: string;
}
export interface GetTagsRequest {
    search?: string;
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}
export interface UpdateTagRequest {
    slug: string;
    tagCreateRequest: TagCreateRequest;
}
/**
 *
 */
export declare class TagApi extends runtime.BaseAPI {
    /**
     * tag
     * create tag
     */
    createTagRaw(requestParameters: CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>>;
    /**
     * tag
     * create tag
     */
    createTag(requestParameters: CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag>;
    /**
     * tag
     * delete tag
     */
    deleteTagRaw(requestParameters: DeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneralResponse>>;
    /**
     * tag
     * delete tag
     */
    deleteTag(requestParameters: DeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneralResponse>;
    /**
     * Get all posts in a tag
     * Get Posts
     */
    getPostsInTagRaw(requestParameters: GetPostsInTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostsPage>>;
    /**
     * Get all posts in a tag
     * Get Posts
     */
    getPostsInTag(requestParameters: GetPostsInTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostsPage>;
    /**
     * Get tag by slug
     * Get Tag
     */
    getTagRaw(requestParameters: GetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>>;
    /**
     * Get tag by slug
     * Get Tag
     */
    getTag(requestParameters: GetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag>;
    /**
     * Get all tags
     * Get Tags
     */
    getTagsRaw(requestParameters: GetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagsPage>>;
    /**
     * Get all tags
     * Get Tags
     */
    getTags(requestParameters?: GetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagsPage>;
    /**
     * tag
     * update tag
     */
    updateTagRaw(requestParameters: UpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>>;
    /**
     * tag
     * update tag
     */
    updateTag(requestParameters: UpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag>;
}
