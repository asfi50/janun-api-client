"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Janun API
 * REST API for Janun Backend Service by Team QuantumGuys
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThreadsApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class ThreadsApi extends runtime.BaseAPI {
    /**
     * Create a thread
     * Create Thread
     */
    createThreadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['channelSlug'] == null) {
                throw new runtime.RequiredError('channelSlug', 'Required parameter "channelSlug" was null or undefined when calling createThread().');
            }
            if (requestParameters['threadCreateRequest'] == null) {
                throw new runtime.RequiredError('threadCreateRequest', 'Required parameter "threadCreateRequest" was null or undefined when calling createThread().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/channel/{channelSlug}/thread`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ThreadCreateRequestToJSON)(requestParameters['threadCreateRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ThreadFromJSON)(jsonValue));
        });
    }
    /**
     * Create a thread
     * Create Thread
     */
    createThread(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createThreadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a thread
     * Delete Thread
     */
    deleteThreadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['channelSlug'] == null) {
                throw new runtime.RequiredError('channelSlug', 'Required parameter "channelSlug" was null or undefined when calling deleteThread().');
            }
            if (requestParameters['threadSlug'] == null) {
                throw new runtime.RequiredError('threadSlug', 'Required parameter "threadSlug" was null or undefined when calling deleteThread().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/channel/{channelSlug}/thread/{threadSlug}`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))).replace(`{${"threadSlug"}}`, encodeURIComponent(String(requestParameters['threadSlug']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GeneralResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Delete a thread
     * Delete Thread
     */
    deleteThread(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteThreadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get all posts in a channel
     * Get Posts
     */
    getPostsInThreadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['channelSlug'] == null) {
                throw new runtime.RequiredError('channelSlug', 'Required parameter "channelSlug" was null or undefined when calling getPostsInThread().');
            }
            if (requestParameters['threadSlug'] == null) {
                throw new runtime.RequiredError('threadSlug', 'Required parameter "threadSlug" was null or undefined when calling getPostsInThread().');
            }
            const queryParameters = {};
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['sort'] != null) {
                queryParameters['sort'] = requestParameters['sort'];
            }
            if (requestParameters['order'] != null) {
                queryParameters['order'] = requestParameters['order'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/channel/{channelSlug}/thread/{threadSlug}/posts`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))).replace(`{${"threadSlug"}}`, encodeURIComponent(String(requestParameters['threadSlug']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PostsPageFromJSON)(jsonValue));
        });
    }
    /**
     * Get all posts in a channel
     * Get Posts
     */
    getPostsInThread(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPostsInThreadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a thread
     * Get Thread
     */
    getThreadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['channelSlug'] == null) {
                throw new runtime.RequiredError('channelSlug', 'Required parameter "channelSlug" was null or undefined when calling getThread().');
            }
            if (requestParameters['threadSlug'] == null) {
                throw new runtime.RequiredError('threadSlug', 'Required parameter "threadSlug" was null or undefined when calling getThread().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/channel/{channelSlug}/thread/{threadSlug}`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))).replace(`{${"threadSlug"}}`, encodeURIComponent(String(requestParameters['threadSlug']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ThreadFromJSON)(jsonValue));
        });
    }
    /**
     * Get a thread
     * Get Thread
     */
    getThread(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getThreadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get all threads in a channel
     * Get Threads
     */
    getThreadsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['channelSlug'] == null) {
                throw new runtime.RequiredError('channelSlug', 'Required parameter "channelSlug" was null or undefined when calling getThreads().');
            }
            const queryParameters = {};
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['sort'] != null) {
                queryParameters['sort'] = requestParameters['sort'];
            }
            if (requestParameters['order'] != null) {
                queryParameters['order'] = requestParameters['order'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/channel/{channelSlug}/thread`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ThreadsPageFromJSON)(jsonValue));
        });
    }
    /**
     * Get all threads in a channel
     * Get Threads
     */
    getThreads(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getThreadsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Subscribe to a thread
     * Subscribe to Thread
     */
    subscribeThreadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['channelSlug'] == null) {
                throw new runtime.RequiredError('channelSlug', 'Required parameter "channelSlug" was null or undefined when calling subscribeThread().');
            }
            if (requestParameters['threadSlug'] == null) {
                throw new runtime.RequiredError('threadSlug', 'Required parameter "threadSlug" was null or undefined when calling subscribeThread().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/channel/{channelSlug}/thread/{threadSlug}/subscribe`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))).replace(`{${"threadSlug"}}`, encodeURIComponent(String(requestParameters['threadSlug']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ThreadFromJSON)(jsonValue));
        });
    }
    /**
     * Subscribe to a thread
     * Subscribe to Thread
     */
    subscribeThread(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscribeThreadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Unsubscribe from a thread
     * Unsubscribe from Thread
     */
    unsubscribeThreadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['channelSlug'] == null) {
                throw new runtime.RequiredError('channelSlug', 'Required parameter "channelSlug" was null or undefined when calling unsubscribeThread().');
            }
            if (requestParameters['threadSlug'] == null) {
                throw new runtime.RequiredError('threadSlug', 'Required parameter "threadSlug" was null or undefined when calling unsubscribeThread().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/channel/{channelSlug}/thread/{threadSlug}/unsubscribe`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))).replace(`{${"threadSlug"}}`, encodeURIComponent(String(requestParameters['threadSlug']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ThreadFromJSON)(jsonValue));
        });
    }
    /**
     * Unsubscribe from a thread
     * Unsubscribe from Thread
     */
    unsubscribeThread(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.unsubscribeThreadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a thread
     * Update Thread
     */
    updateThreadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['channelSlug'] == null) {
                throw new runtime.RequiredError('channelSlug', 'Required parameter "channelSlug" was null or undefined when calling updateThread().');
            }
            if (requestParameters['threadSlug'] == null) {
                throw new runtime.RequiredError('threadSlug', 'Required parameter "threadSlug" was null or undefined when calling updateThread().');
            }
            if (requestParameters['threadCreateRequest'] == null) {
                throw new runtime.RequiredError('threadCreateRequest', 'Required parameter "threadCreateRequest" was null or undefined when calling updateThread().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("BearerAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/channel/{channelSlug}/thread/{threadSlug}`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))).replace(`{${"threadSlug"}}`, encodeURIComponent(String(requestParameters['threadSlug']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ThreadCreateRequestToJSON)(requestParameters['threadCreateRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ThreadFromJSON)(jsonValue));
        });
    }
    /**
     * Update a thread
     * Update Thread
     */
    updateThread(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateThreadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ThreadsApi = ThreadsApi;
