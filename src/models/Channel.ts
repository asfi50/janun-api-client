/* tslint:disable */
/* eslint-disable */
/**
 * Janun API
 * REST API for Janun Backend Service by Team QuantumGuys
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TagMin } from './TagMin';
import {
    TagMinFromJSON,
    TagMinFromJSONTyped,
    TagMinToJSON,
} from './TagMin';
import type { ThreadMin } from './ThreadMin';
import {
    ThreadMinFromJSON,
    ThreadMinFromJSONTyped,
    ThreadMinToJSON,
} from './ThreadMin';

/**
 * 
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    slug?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Channel
     */
    premium?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Channel
     */
    subscribed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    language?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    cover?: string;
    /**
     * 
     * @type {number}
     * @memberof Channel
     */
    subscriberCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Channel
     */
    postCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Channel
     */
    linkCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Channel
     */
    threadCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Channel
     */
    tagCount?: number;
    /**
     * 
     * @type {Set<string>}
     * @memberof Channel
     */
    links?: Set<string>;
    /**
     * 
     * @type {Set<ThreadMin>}
     * @memberof Channel
     */
    threads?: Set<ThreadMin>;
    /**
     * 
     * @type {Set<TagMin>}
     * @memberof Channel
     */
    tags?: Set<TagMin>;
}

/**
 * Check if a given object implements the Channel interface.
 */
export function instanceOfChannel(value: object): value is Channel {
    return true;
}

export function ChannelFromJSON(json: any): Channel {
    return ChannelFromJSONTyped(json, false);
}

export function ChannelFromJSONTyped(json: any, ignoreDiscriminator: boolean): Channel {
    if (json == null) {
        return json;
    }
    return {
        
        'slug': json['slug'] == null ? undefined : json['slug'],
        'name': json['name'] == null ? undefined : json['name'],
        'premium': json['premium'] == null ? undefined : json['premium'],
        'subscribed': json['subscribed'] == null ? undefined : json['subscribed'],
        'description': json['description'] == null ? undefined : json['description'],
        'language': json['language'] == null ? undefined : json['language'],
        'city': json['city'] == null ? undefined : json['city'],
        'country': json['country'] == null ? undefined : json['country'],
        'logo': json['logo'] == null ? undefined : json['logo'],
        'cover': json['cover'] == null ? undefined : json['cover'],
        'subscriberCount': json['subscriberCount'] == null ? undefined : json['subscriberCount'],
        'postCount': json['postCount'] == null ? undefined : json['postCount'],
        'linkCount': json['linkCount'] == null ? undefined : json['linkCount'],
        'threadCount': json['threadCount'] == null ? undefined : json['threadCount'],
        'tagCount': json['tagCount'] == null ? undefined : json['tagCount'],
        'links': json['links'] == null ? undefined : json['links'],
        'threads': json['threads'] == null ? undefined : (new Set((json['threads'] as Array<any>).map(ThreadMinFromJSON))),
        'tags': json['tags'] == null ? undefined : (new Set((json['tags'] as Array<any>).map(TagMinFromJSON))),
    };
}

export function ChannelToJSON(value?: Channel | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'slug': value['slug'],
        'name': value['name'],
        'premium': value['premium'],
        'subscribed': value['subscribed'],
        'description': value['description'],
        'language': value['language'],
        'city': value['city'],
        'country': value['country'],
        'logo': value['logo'],
        'cover': value['cover'],
        'subscriberCount': value['subscriberCount'],
        'postCount': value['postCount'],
        'linkCount': value['linkCount'],
        'threadCount': value['threadCount'],
        'tagCount': value['tagCount'],
        'links': value['links'] == null ? undefined : Array.from(value['links'] as Set<any>),
        'threads': value['threads'] == null ? undefined : (Array.from(value['threads'] as Set<any>).map(ThreadMinToJSON)),
        'tags': value['tags'] == null ? undefined : (Array.from(value['tags'] as Set<any>).map(TagMinToJSON)),
    };
}

