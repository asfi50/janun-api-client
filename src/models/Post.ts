/* tslint:disable */
/* eslint-disable */
/**
 * Janun API
 * REST API for Janun Backend Service by Team QuantumGuys
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChannelMin } from './ChannelMin';
import {
    ChannelMinFromJSON,
    ChannelMinFromJSONTyped,
    ChannelMinToJSON,
} from './ChannelMin';
import type { TagMin } from './TagMin';
import {
    TagMinFromJSON,
    TagMinFromJSONTyped,
    TagMinToJSON,
} from './TagMin';
import type { MediaMin } from './MediaMin';
import {
    MediaMinFromJSON,
    MediaMinFromJSONTyped,
    MediaMinToJSON,
} from './MediaMin';
import type { ThreadMin } from './ThreadMin';
import {
    ThreadMinFromJSON,
    ThreadMinFromJSONTyped,
    ThreadMinToJSON,
} from './ThreadMin';

/**
 * 
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    slug?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    type?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Post
     */
    premium?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    reaction?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Post
     */
    reacted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Post
     */
    reported?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Post
     */
    commented?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Post
     */
    subscribed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    createdAgo?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    updatedAgo?: string;
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    views?: number;
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    likesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    dislikesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    commentsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    sharesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    reportsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    tagCount?: number;
    /**
     * 
     * @type {ThreadMin}
     * @memberof Post
     */
    thread?: ThreadMin;
    /**
     * 
     * @type {ChannelMin}
     * @memberof Post
     */
    channel?: ChannelMin;
    /**
     * 
     * @type {Set<TagMin>}
     * @memberof Post
     */
    tags?: Set<TagMin>;
    /**
     * 
     * @type {Array<MediaMin>}
     * @memberof Post
     */
    media?: Array<MediaMin>;
}

/**
 * Check if a given object implements the Post interface.
 */
export function instanceOfPost(value: object): value is Post {
    return true;
}

export function PostFromJSON(json: any): Post {
    return PostFromJSONTyped(json, false);
}

export function PostFromJSONTyped(json: any, ignoreDiscriminator: boolean): Post {
    if (json == null) {
        return json;
    }
    return {
        
        'slug': json['slug'] == null ? undefined : json['slug'],
        'title': json['title'] == null ? undefined : json['title'],
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'updatedAt': json['updatedAt'] == null ? undefined : json['updatedAt'],
        'type': json['type'] == null ? undefined : json['type'],
        'premium': json['premium'] == null ? undefined : json['premium'],
        'reaction': json['reaction'] == null ? undefined : json['reaction'],
        'reacted': json['reacted'] == null ? undefined : json['reacted'],
        'reported': json['reported'] == null ? undefined : json['reported'],
        'commented': json['commented'] == null ? undefined : json['commented'],
        'subscribed': json['subscribed'] == null ? undefined : json['subscribed'],
        'content': json['content'] == null ? undefined : json['content'],
        'status': json['status'] == null ? undefined : json['status'],
        'createdAgo': json['createdAgo'] == null ? undefined : json['createdAgo'],
        'updatedAgo': json['updatedAgo'] == null ? undefined : json['updatedAgo'],
        'views': json['views'] == null ? undefined : json['views'],
        'likesCount': json['likesCount'] == null ? undefined : json['likesCount'],
        'dislikesCount': json['dislikesCount'] == null ? undefined : json['dislikesCount'],
        'commentsCount': json['commentsCount'] == null ? undefined : json['commentsCount'],
        'sharesCount': json['sharesCount'] == null ? undefined : json['sharesCount'],
        'reportsCount': json['reportsCount'] == null ? undefined : json['reportsCount'],
        'tagCount': json['tagCount'] == null ? undefined : json['tagCount'],
        'thread': json['thread'] == null ? undefined : ThreadMinFromJSON(json['thread']),
        'channel': json['channel'] == null ? undefined : ChannelMinFromJSON(json['channel']),
        'tags': json['tags'] == null ? undefined : (new Set((json['tags'] as Array<any>).map(TagMinFromJSON))),
        'media': json['media'] == null ? undefined : ((json['media'] as Array<any>).map(MediaMinFromJSON)),
    };
}

export function PostToJSON(value?: Post | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'slug': value['slug'],
        'title': value['title'],
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
        'type': value['type'],
        'premium': value['premium'],
        'reaction': value['reaction'],
        'reacted': value['reacted'],
        'reported': value['reported'],
        'commented': value['commented'],
        'subscribed': value['subscribed'],
        'content': value['content'],
        'status': value['status'],
        'createdAgo': value['createdAgo'],
        'updatedAgo': value['updatedAgo'],
        'views': value['views'],
        'likesCount': value['likesCount'],
        'dislikesCount': value['dislikesCount'],
        'commentsCount': value['commentsCount'],
        'sharesCount': value['sharesCount'],
        'reportsCount': value['reportsCount'],
        'tagCount': value['tagCount'],
        'thread': ThreadMinToJSON(value['thread']),
        'channel': ChannelMinToJSON(value['channel']),
        'tags': value['tags'] == null ? undefined : (Array.from(value['tags'] as Set<any>).map(TagMinToJSON)),
        'media': value['media'] == null ? undefined : ((value['media'] as Array<any>).map(MediaMinToJSON)),
    };
}

