/* tslint:disable */
/* eslint-disable */
/**
 * Janun API
 * REST API for Janun Backend Service by Team QuantumGuys
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TagMin } from './TagMin';
import {
    TagMinFromJSON,
    TagMinFromJSONTyped,
    TagMinToJSON,
} from './TagMin';
import type { MediaMin } from './MediaMin';
import {
    MediaMinFromJSON,
    MediaMinFromJSONTyped,
    MediaMinToJSON,
} from './MediaMin';

/**
 * 
 * @export
 * @interface PostCreateRequest
 */
export interface PostCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof PostCreateRequest
     */
    channelSlug?: string;
    /**
     * 
     * @type {string}
     * @memberof PostCreateRequest
     */
    threadSlug?: string;
    /**
     * 
     * @type {string}
     * @memberof PostCreateRequest
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof PostCreateRequest
     */
    content?: string;
    /**
     * Type of the post
     * @type {string}
     * @memberof PostCreateRequest
     */
    type?: PostCreateRequestTypeEnum;
    /**
     * Status of the post
     * @type {string}
     * @memberof PostCreateRequest
     */
    status?: PostCreateRequestStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof PostCreateRequest
     */
    premium?: boolean;
    /**
     * 
     * @type {Set<TagMin>}
     * @memberof PostCreateRequest
     */
    tags?: Set<TagMin>;
    /**
     * 
     * @type {Array<MediaMin>}
     * @memberof PostCreateRequest
     */
    media?: Array<MediaMin>;
}


/**
 * @export
 */
export const PostCreateRequestTypeEnum = {
    Post: 'post'
} as const;
export type PostCreateRequestTypeEnum = typeof PostCreateRequestTypeEnum[keyof typeof PostCreateRequestTypeEnum];

/**
 * @export
 */
export const PostCreateRequestStatusEnum = {
    Draft: 'draft',
    Published: 'published'
} as const;
export type PostCreateRequestStatusEnum = typeof PostCreateRequestStatusEnum[keyof typeof PostCreateRequestStatusEnum];


/**
 * Check if a given object implements the PostCreateRequest interface.
 */
export function instanceOfPostCreateRequest(value: object): value is PostCreateRequest {
    return true;
}

export function PostCreateRequestFromJSON(json: any): PostCreateRequest {
    return PostCreateRequestFromJSONTyped(json, false);
}

export function PostCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostCreateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'channelSlug': json['channelSlug'] == null ? undefined : json['channelSlug'],
        'threadSlug': json['threadSlug'] == null ? undefined : json['threadSlug'],
        'title': json['title'] == null ? undefined : json['title'],
        'content': json['content'] == null ? undefined : json['content'],
        'type': json['type'] == null ? undefined : json['type'],
        'status': json['status'] == null ? undefined : json['status'],
        'premium': json['premium'] == null ? undefined : json['premium'],
        'tags': json['tags'] == null ? undefined : (new Set((json['tags'] as Array<any>).map(TagMinFromJSON))),
        'media': json['media'] == null ? undefined : ((json['media'] as Array<any>).map(MediaMinFromJSON)),
    };
}

export function PostCreateRequestToJSON(value?: PostCreateRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'channelSlug': value['channelSlug'],
        'threadSlug': value['threadSlug'],
        'title': value['title'],
        'content': value['content'],
        'type': value['type'],
        'status': value['status'],
        'premium': value['premium'],
        'tags': value['tags'] == null ? undefined : (Array.from(value['tags'] as Set<any>).map(TagMinToJSON)),
        'media': value['media'] == null ? undefined : ((value['media'] as Array<any>).map(MediaMinToJSON)),
    };
}

