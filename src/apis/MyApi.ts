/* tslint:disable */
/* eslint-disable */
/**
 * Janun API
 * REST API for Janun Backend Service by Team QuantumGuys
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChannelsPage,
  CommentsPage,
  PostsPage,
  ReactionsPage,
  ReportsPage,
  ThreadsPage,
  User,
} from '../models/index';
import {
    ChannelsPageFromJSON,
    ChannelsPageToJSON,
    CommentsPageFromJSON,
    CommentsPageToJSON,
    PostsPageFromJSON,
    PostsPageToJSON,
    ReactionsPageFromJSON,
    ReactionsPageToJSON,
    ReportsPageFromJSON,
    ReportsPageToJSON,
    ThreadsPageFromJSON,
    ThreadsPageToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface GetMyCommentsRequest {
    search?: string;
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}

export interface GetMyReactionsRequest {
    search?: string;
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}

export interface GetMyReportsRequest {
    search?: string;
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}

export interface GetMySubscribedChannelsRequest {
    search?: string;
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}

export interface GetMySubscribedPostsRequest {
    search?: string;
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}

export interface GetMySubscribedThreadsRequest {
    search?: string;
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}

/**
 * 
 */
export class MyApi extends runtime.BaseAPI {

    /**
     * get logged in user
     * get logged in user
     */
    async getMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * get logged in user
     * get logged in user
     */
    async getMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all comments by me
     */
    async getMyCommentsRaw(requestParameters: GetMyCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentsPage>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/comment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentsPageFromJSON(jsonValue));
    }

    /**
     * Get all comments by me
     */
    async getMyComments(requestParameters: GetMyCommentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentsPage> {
        const response = await this.getMyCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all reactions by me
     */
    async getMyReactionsRaw(requestParameters: GetMyReactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactionsPage>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/reaction`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReactionsPageFromJSON(jsonValue));
    }

    /**
     * Get all reactions by me
     */
    async getMyReactions(requestParameters: GetMyReactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactionsPage> {
        const response = await this.getMyReactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all reports by me
     */
    async getMyReportsRaw(requestParameters: GetMyReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportsPage>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/report`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportsPageFromJSON(jsonValue));
    }

    /**
     * Get all reports by me
     */
    async getMyReports(requestParameters: GetMyReportsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportsPage> {
        const response = await this.getMyReportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * user\'s subscribed channels
     */
    async getMySubscribedChannelsRaw(requestParameters: GetMySubscribedChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelsPage>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/channel`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelsPageFromJSON(jsonValue));
    }

    /**
     * user\'s subscribed channels
     */
    async getMySubscribedChannels(requestParameters: GetMySubscribedChannelsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelsPage> {
        const response = await this.getMySubscribedChannelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get subscribed posts
     */
    async getMySubscribedPostsRaw(requestParameters: GetMySubscribedPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostsPage>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/post`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostsPageFromJSON(jsonValue));
    }

    /**
     * Get subscribed posts
     */
    async getMySubscribedPosts(requestParameters: GetMySubscribedPostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostsPage> {
        const response = await this.getMySubscribedPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get subscribed Threads
     */
    async getMySubscribedThreadsRaw(requestParameters: GetMySubscribedThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThreadsPage>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/thread`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadsPageFromJSON(jsonValue));
    }

    /**
     * Get subscribed Threads
     */
    async getMySubscribedThreads(requestParameters: GetMySubscribedThreadsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThreadsPage> {
        const response = await this.getMySubscribedThreadsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
