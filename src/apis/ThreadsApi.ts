/* tslint:disable */
/* eslint-disable */
/**
 * Janun API
 * REST API for Janun Backend Service by Team QuantumGuys
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GeneralResponse,
  PostsPage,
  Thread,
  ThreadCreateRequest,
  ThreadsPage,
} from '../models/index';
import {
    GeneralResponseFromJSON,
    GeneralResponseToJSON,
    PostsPageFromJSON,
    PostsPageToJSON,
    ThreadFromJSON,
    ThreadToJSON,
    ThreadCreateRequestFromJSON,
    ThreadCreateRequestToJSON,
    ThreadsPageFromJSON,
    ThreadsPageToJSON,
} from '../models/index';

export interface CreateThreadRequest {
    channelSlug: string;
    threadCreateRequest: ThreadCreateRequest;
}

export interface DeleteThreadRequest {
    channelSlug: string;
    threadSlug: string;
}

export interface GetPostsInThreadRequest {
    channelSlug: string;
    threadSlug: string;
    search?: string;
    sort?: string;
    order?: string;
    page?: number;
}

export interface GetThreadRequest {
    channelSlug: string;
    threadSlug: string;
}

export interface GetThreadsRequest {
    channelSlug: string;
    search?: string;
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}

export interface SubscribeThreadRequest {
    channelSlug: string;
    threadSlug: string;
}

export interface UnsubscribeThreadRequest {
    channelSlug: string;
    threadSlug: string;
}

export interface UpdateThreadRequest {
    channelSlug: string;
    threadSlug: string;
    threadCreateRequest: ThreadCreateRequest;
}

/**
 * 
 */
export class ThreadsApi extends runtime.BaseAPI {

    /**
     * Create a thread
     * Create Thread
     */
    async createThreadRaw(requestParameters: CreateThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Thread>> {
        if (requestParameters['channelSlug'] == null) {
            throw new runtime.RequiredError(
                'channelSlug',
                'Required parameter "channelSlug" was null or undefined when calling createThread().'
            );
        }

        if (requestParameters['threadCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'threadCreateRequest',
                'Required parameter "threadCreateRequest" was null or undefined when calling createThread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/channel/{channelSlug}/thread`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThreadCreateRequestToJSON(requestParameters['threadCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadFromJSON(jsonValue));
    }

    /**
     * Create a thread
     * Create Thread
     */
    async createThread(requestParameters: CreateThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Thread> {
        const response = await this.createThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a thread
     * Delete Thread
     */
    async deleteThreadRaw(requestParameters: DeleteThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneralResponse>> {
        if (requestParameters['channelSlug'] == null) {
            throw new runtime.RequiredError(
                'channelSlug',
                'Required parameter "channelSlug" was null or undefined when calling deleteThread().'
            );
        }

        if (requestParameters['threadSlug'] == null) {
            throw new runtime.RequiredError(
                'threadSlug',
                'Required parameter "threadSlug" was null or undefined when calling deleteThread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/channel/{channelSlug}/thread/{threadSlug}`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))).replace(`{${"threadSlug"}}`, encodeURIComponent(String(requestParameters['threadSlug']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeneralResponseFromJSON(jsonValue));
    }

    /**
     * Delete a thread
     * Delete Thread
     */
    async deleteThread(requestParameters: DeleteThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneralResponse> {
        const response = await this.deleteThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all posts in a channel
     * Get Posts
     */
    async getPostsInThreadRaw(requestParameters: GetPostsInThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostsPage>> {
        if (requestParameters['channelSlug'] == null) {
            throw new runtime.RequiredError(
                'channelSlug',
                'Required parameter "channelSlug" was null or undefined when calling getPostsInThread().'
            );
        }

        if (requestParameters['threadSlug'] == null) {
            throw new runtime.RequiredError(
                'threadSlug',
                'Required parameter "threadSlug" was null or undefined when calling getPostsInThread().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/channel/{channelSlug}/thread/{threadSlug}/posts`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))).replace(`{${"threadSlug"}}`, encodeURIComponent(String(requestParameters['threadSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostsPageFromJSON(jsonValue));
    }

    /**
     * Get all posts in a channel
     * Get Posts
     */
    async getPostsInThread(requestParameters: GetPostsInThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostsPage> {
        const response = await this.getPostsInThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a thread
     * Get Thread
     */
    async getThreadRaw(requestParameters: GetThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Thread>> {
        if (requestParameters['channelSlug'] == null) {
            throw new runtime.RequiredError(
                'channelSlug',
                'Required parameter "channelSlug" was null or undefined when calling getThread().'
            );
        }

        if (requestParameters['threadSlug'] == null) {
            throw new runtime.RequiredError(
                'threadSlug',
                'Required parameter "threadSlug" was null or undefined when calling getThread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/channel/{channelSlug}/thread/{threadSlug}`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))).replace(`{${"threadSlug"}}`, encodeURIComponent(String(requestParameters['threadSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadFromJSON(jsonValue));
    }

    /**
     * Get a thread
     * Get Thread
     */
    async getThread(requestParameters: GetThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Thread> {
        const response = await this.getThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all threads in a channel
     * Get Threads
     */
    async getThreadsRaw(requestParameters: GetThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThreadsPage>> {
        if (requestParameters['channelSlug'] == null) {
            throw new runtime.RequiredError(
                'channelSlug',
                'Required parameter "channelSlug" was null or undefined when calling getThreads().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/channel/{channelSlug}/thread`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadsPageFromJSON(jsonValue));
    }

    /**
     * Get all threads in a channel
     * Get Threads
     */
    async getThreads(requestParameters: GetThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThreadsPage> {
        const response = await this.getThreadsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Subscribe to a thread
     * Subscribe to Thread
     */
    async subscribeThreadRaw(requestParameters: SubscribeThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Thread>> {
        if (requestParameters['channelSlug'] == null) {
            throw new runtime.RequiredError(
                'channelSlug',
                'Required parameter "channelSlug" was null or undefined when calling subscribeThread().'
            );
        }

        if (requestParameters['threadSlug'] == null) {
            throw new runtime.RequiredError(
                'threadSlug',
                'Required parameter "threadSlug" was null or undefined when calling subscribeThread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/channel/{channelSlug}/thread/{threadSlug}/subscribe`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))).replace(`{${"threadSlug"}}`, encodeURIComponent(String(requestParameters['threadSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadFromJSON(jsonValue));
    }

    /**
     * Subscribe to a thread
     * Subscribe to Thread
     */
    async subscribeThread(requestParameters: SubscribeThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Thread> {
        const response = await this.subscribeThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unsubscribe from a thread
     * Unsubscribe from Thread
     */
    async unsubscribeThreadRaw(requestParameters: UnsubscribeThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Thread>> {
        if (requestParameters['channelSlug'] == null) {
            throw new runtime.RequiredError(
                'channelSlug',
                'Required parameter "channelSlug" was null or undefined when calling unsubscribeThread().'
            );
        }

        if (requestParameters['threadSlug'] == null) {
            throw new runtime.RequiredError(
                'threadSlug',
                'Required parameter "threadSlug" was null or undefined when calling unsubscribeThread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/channel/{channelSlug}/thread/{threadSlug}/unsubscribe`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))).replace(`{${"threadSlug"}}`, encodeURIComponent(String(requestParameters['threadSlug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadFromJSON(jsonValue));
    }

    /**
     * Unsubscribe from a thread
     * Unsubscribe from Thread
     */
    async unsubscribeThread(requestParameters: UnsubscribeThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Thread> {
        const response = await this.unsubscribeThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a thread
     * Update Thread
     */
    async updateThreadRaw(requestParameters: UpdateThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Thread>> {
        if (requestParameters['channelSlug'] == null) {
            throw new runtime.RequiredError(
                'channelSlug',
                'Required parameter "channelSlug" was null or undefined when calling updateThread().'
            );
        }

        if (requestParameters['threadSlug'] == null) {
            throw new runtime.RequiredError(
                'threadSlug',
                'Required parameter "threadSlug" was null or undefined when calling updateThread().'
            );
        }

        if (requestParameters['threadCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'threadCreateRequest',
                'Required parameter "threadCreateRequest" was null or undefined when calling updateThread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/channel/{channelSlug}/thread/{threadSlug}`.replace(`{${"channelSlug"}}`, encodeURIComponent(String(requestParameters['channelSlug']))).replace(`{${"threadSlug"}}`, encodeURIComponent(String(requestParameters['threadSlug']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ThreadCreateRequestToJSON(requestParameters['threadCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreadFromJSON(jsonValue));
    }

    /**
     * Update a thread
     * Update Thread
     */
    async updateThread(requestParameters: UpdateThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Thread> {
        const response = await this.updateThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
